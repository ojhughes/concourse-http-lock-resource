buildscript {
	ext {
		springBootVersion = "1.5.10.RELEASE"
	}
	repositories {
		mavenCentral()
		jcenter()
		maven {
			url "https://plugins.gradle.org/m2/"
		}
		maven {
			url "http://repo.spring.io/plugins-release"
		}
	}
	dependencies {
		classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
		classpath("org.springframework.build.gradle:propdeps-plugin:0.0.7")
		classpath("nu.studer:gradle-jooq-plugin:2.0.9")
	}
}

apply plugin: "java"
apply plugin: "idea"
apply plugin: "org.springframework.boot"
apply plugin: "propdeps-idea"
apply plugin: "nu.studer.jooq"

group = "io.pivotal.spring.cloud.services"
version = "0.0.1-SNAPSHOT"
sourceCompatibility = 1.8

repositories {
	mavenCentral()
}

dependencies {
	compile("org.springframework.boot:spring-boot-starter-actuator")
	compile("org.springframework.boot:spring-boot-starter-jooq")
	compile("org.springframework.boot:spring-boot-starter-security")
	compile("org.springframework.boot:spring-boot-starter-web")
	compile("org.flywaydb:flyway-core")
	compile('org.hibernate.javax.persistence:hibernate-jpa-2.1-api:1.0.2.Final')
	runtime("org.springframework.boot:spring-boot-devtools")
	runtime("org.postgresql:postgresql")
	jooqRuntime("org.postgresql:postgresql")
	compileOnly("org.springframework.boot:spring-boot-configuration-processor")
	compileOnly("org.projectlombok:lombok")
	testCompile("org.springframework.boot:spring-boot-starter-test")
	testCompile("org.springframework.security:spring-security-test")
	testCompile("com.opentable.components:otj-pg-embedded:0.11.0")
	testCompile("javax.json:javax.json-api:1.1.2")
	testCompile("org.glassfish:javax.json:1.0.4")

}

jooq {
	lockstore(sourceSets.main) {
		jdbc {
			driver = "org.postgresql.Driver"
			url = "jdbc:postgresql://localhost:5432/lockstore"
			user = "lockstore"
			password = "b0jyMcPir@t3"
			schema = "public"
		}
		generator {
			name = "org.jooq.util.DefaultGenerator"
			strategy {
				name = "org.jooq.util.DefaultGeneratorStrategy"
			}
			database {
				name = "org.jooq.util.postgres.PostgresDatabase"
				inputSchema = "public"
				customTypes {
					customType {
						name = "com.fasterxml.jackson.databind.JsonNode"
						converter = "io.pivotal.spring.cloud.services.resourcelock.db.config.PostgresJSONJacksonJsonNodeBinding"
					}
				}
				forcedTypes {
					forcedType {
						name = "com.fasterxml.jackson.databind.JsonNode"
						expression = "public\\.environments\\.metadata"
					}
				}
			}
			generate {
				relations = true
				deprecated = false
				records = true
				immutablePojos = false
				fluentSetters = true
			}
			target {
				packageName = "io.pivotal.spring.cloud.services.resourcelock.db.generated"
				directory = "src/main/java"
			}
		}
	}
}

