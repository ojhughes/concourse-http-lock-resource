/*
 * This file is generated by jOOQ.
*/
package io.pivotal.spring.cloud.services.resourcelock.db.generated.tables;


import io.pivotal.spring.cloud.services.resourcelock.db.generated.Indexes;
import io.pivotal.spring.cloud.services.resourcelock.db.generated.Keys;
import io.pivotal.spring.cloud.services.resourcelock.db.generated.Public;
import io.pivotal.spring.cloud.services.resourcelock.db.generated.tables.records.PoolsRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * A pool is a logical grouping of environments eg all environments having 
 * version 1.12
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.1"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Pools extends TableImpl<PoolsRecord> {

    private static final long serialVersionUID = -39666896;

    /**
     * The reference instance of <code>public.pools</code>
     */
    public static final Pools POOLS = new Pools();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<PoolsRecord> getRecordType() {
        return PoolsRecord.class;
    }

    /**
     * The column <code>public.pools.id</code>.
     */
    public final TableField<PoolsRecord, Integer> ID = createField("id", org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.field("nextval('pools_id_seq'::regclass)", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>public.pools.name</code>.
     */
    public final TableField<PoolsRecord, String> NAME = createField("name", org.jooq.impl.SQLDataType.VARCHAR.nullable(false), this, "");

    /**
     * Create a <code>public.pools</code> table reference
     */
    public Pools() {
        this(DSL.name("pools"), null);
    }

    /**
     * Create an aliased <code>public.pools</code> table reference
     */
    public Pools(String alias) {
        this(DSL.name(alias), POOLS);
    }

    /**
     * Create an aliased <code>public.pools</code> table reference
     */
    public Pools(Name alias) {
        this(alias, POOLS);
    }

    private Pools(Name alias, Table<PoolsRecord> aliased) {
        this(alias, aliased, null);
    }

    private Pools(Name alias, Table<PoolsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "A pool is a logical grouping of environments eg all environments having version 1.12");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.POOLS_ID_UINDEX, Indexes.POOLS_NAME_UINDEX, Indexes.POOLS_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<PoolsRecord, Integer> getIdentity() {
        return Keys.IDENTITY_POOLS;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<PoolsRecord> getPrimaryKey() {
        return Keys.POOLS_PKEY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<PoolsRecord>> getKeys() {
        return Arrays.<UniqueKey<PoolsRecord>>asList(Keys.POOLS_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Pools as(String alias) {
        return new Pools(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Pools as(Name alias) {
        return new Pools(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Pools rename(String name) {
        return new Pools(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Pools rename(Name name) {
        return new Pools(name, null);
    }
}
