/*
 * This file is generated by jOOQ.
*/
package io.pivotal.spring.cloud.services.resourcelock.db.generated.tables;


import com.fasterxml.jackson.databind.JsonNode;

import io.pivotal.spring.cloud.services.resourcelock.db.config.PostgresJSONJacksonJsonNodeBinding;
import io.pivotal.spring.cloud.services.resourcelock.db.generated.Indexes;
import io.pivotal.spring.cloud.services.resourcelock.db.generated.Keys;
import io.pivotal.spring.cloud.services.resourcelock.db.generated.Public;
import io.pivotal.spring.cloud.services.resourcelock.db.generated.tables.records.EnvironmentsRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * Each environment represents a managed test PCF environment
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.1"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Environments extends TableImpl<EnvironmentsRecord> {

    private static final long serialVersionUID = 474330301;

    /**
     * The reference instance of <code>public.environments</code>
     */
    public static final Environments ENVIRONMENTS = new Environments();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<EnvironmentsRecord> getRecordType() {
        return EnvironmentsRecord.class;
    }

    /**
     * The column <code>public.environments.id</code>.
     */
    public final TableField<EnvironmentsRecord, Integer> ID = createField("id", org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.field("nextval('environments_id_seq'::regclass)", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>public.environments.name</code>.
     */
    public final TableField<EnvironmentsRecord, String> NAME = createField("name", org.jooq.impl.SQLDataType.VARCHAR.nullable(false), this, "");

    /**
     * The column <code>public.environments.metadata</code>.
     */
    public final TableField<EnvironmentsRecord, JsonNode> METADATA = createField("metadata", org.jooq.impl.SQLDataType.OTHER.nullable(false), this, "", new PostgresJSONJacksonJsonNodeBinding());

    /**
     * The column <code>public.environments.lock_id</code>.
     */
    public final TableField<EnvironmentsRecord, Integer> LOCK_ID = createField("lock_id", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>public.environments.pool_id</code>.
     */
    public final TableField<EnvironmentsRecord, Integer> POOL_ID = createField("pool_id", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * Create a <code>public.environments</code> table reference
     */
    public Environments() {
        this(DSL.name("environments"), null);
    }

    /**
     * Create an aliased <code>public.environments</code> table reference
     */
    public Environments(String alias) {
        this(DSL.name(alias), ENVIRONMENTS);
    }

    /**
     * Create an aliased <code>public.environments</code> table reference
     */
    public Environments(Name alias) {
        this(alias, ENVIRONMENTS);
    }

    private Environments(Name alias, Table<EnvironmentsRecord> aliased) {
        this(alias, aliased, null);
    }

    private Environments(Name alias, Table<EnvironmentsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "Each environment represents a managed test PCF environment");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.ENVIRONMENTS_ID_UINDEX, Indexes.ENVIRONMENTS_LOCK_ID_UINDEX, Indexes.ENVIRONMENTS_NAME_UINDEX, Indexes.ENVIRONMENTS_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<EnvironmentsRecord, Integer> getIdentity() {
        return Keys.IDENTITY_ENVIRONMENTS;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<EnvironmentsRecord> getPrimaryKey() {
        return Keys.ENVIRONMENTS_PKEY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<EnvironmentsRecord>> getKeys() {
        return Arrays.<UniqueKey<EnvironmentsRecord>>asList(Keys.ENVIRONMENTS_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<EnvironmentsRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<EnvironmentsRecord, ?>>asList(Keys.ENVIRONMENTS__ENVIRONMENTS_POOLS_ID_FK);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Environments as(String alias) {
        return new Environments(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Environments as(Name alias) {
        return new Environments(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Environments rename(String name) {
        return new Environments(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Environments rename(Name name) {
        return new Environments(name, null);
    }
}
